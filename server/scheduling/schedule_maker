const { MongoClient } = require("mongodb");
const client = new MongoClient(process.env.DB_URL);
const test_course_list = ["CSE 12", "CSE 15L", "WCWP 10A"];

const check_course_validity = (course_list) => {
    for (const course of course_list) {
        if (client.test.courses.find(course))
    }
}

const findNonCollidingSections = (currentEnrolledSections, newCourse) => {
    const nonCollidingSections = [];

    for (const newSection of newCourse.sections) {
        let collides = false;
        for (const enrolledSection of currentEnrolledSections) {
            if (doSectionsCollide(newSection, enrolledSection)) {
                collides = true;
                break;
            }
        }
        if (!collides) {
            nonCollidingSections.push(newSection);
        }
    }

    return nonCollidingSections;
};

const doSectionsCollide = (section1, section2) => {
    for (const meeting1 of section1.meetings) {
        for (const meeting2 of section2.meetings) {
            if (doMeetingsCollide(meeting1, meeting2)) {
                return true;
            }
        }
    }
    return false;
};

const doMeetingsCollide = (meeting1, meeting2) => {
    if (meeting1.days.some(day => meeting2.days.includes(day))) {
        const start1 = parseTime(meeting1.startTime);
        const end1 = parseTime(meeting1.endTime);
        const start2 = parseTime(meeting2.startTime);
        const end2 = parseTime(meeting2.endTime);

        return start1 < end2 && start2 < end1;
    }
    return false;
};

const parseTime = (timeString) => {
    const [hours, minutes] = timeString.split(':').map(Number);
    return hours * 60 + minutes; // Convert time to minutes for easier comparison
};

// Example usage:
const currentEnrolledSections = [/* ... array of section objects the user is already enrolled in ... */];
const newCourse = {/* ... course object with sections ... */};

const availableSections = findNonCollidingSections(currentEnrolledSections, newCourse);
